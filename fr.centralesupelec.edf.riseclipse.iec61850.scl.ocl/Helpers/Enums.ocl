/**
 *  Copyright (c) 2017 CentraleSupélec & EDF.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  This file is part of the RiseClipse tool
 *  
 *  Contributors:
 *      Computer Science Department, CentraleSupélec
 *      EDF R&D
 *  Contacts:
 *      dominique.marcadet@centralesupelec.fr
 *      aurelie.dehouck-neveu@edf.fr
 *  Web site:
 *      http://wdi.supelec.fr/software/RiseClipse/
 */

include '../Helpers/BaseSimpleTypes.ocl'

context ocl::String
 
-----------------------------------------------------------

def: validSclPredefinedPTypeEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'IP', 'IP-SUBNET', 'IP-GATEWAY', 'OSI-NSAP', 'OSI-TSEL', 'OSI-SSEL',
            'OSI-PSEL', 'OSI-AP-Title', 'OSI-AP-Invoke', 'OSI-AE-Qualifier',
            'OSI-AE-Invoke', 'MAC-Address', 'APPID', 'VLAN-PRIORITY', 'VLAN-ID',
            'SNTP-Port', 'MMS-Port', 'DNSName', 'IPv6FlowLabel', 'IPv6ClassOfTraffic',
            'C37-118-IP-Port', 'IP-UDP-PORT', 'IP-TCP-PORT', 'IPv6', 'IPv6-SUBNET',
            'IPv6-GATEWAY' 
        }->includes( self )
    else
        false
    endif

def: validSclExtensionPTypeEnum() : Boolean =
    if( self.validSclName() ) then
        -- TODO: find the corresponding OCL RE
        --self.matches( '[A-Z][0-9A-Za-z\-]*' )
        self.matches( '[A-Z][0-9A-Za-z\u002D]*' )
    else
        false
    endif
 
def: validSclPTypeEnum() : Boolean =
    if validSclPredefinedPTypeEnum() then
        true
    else
        validSclExtensionPTypeEnum()
    endif

-----------------------------------------------------------

def: validSclPredefinedPTypePhysConnEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'Type', 'Plug', 'Cable', 'Port'
        }->includes( self )
    else
        false
    endif

def: validSclPTypePhysConnEnum() : Boolean =
    if validSclPredefinedPTypePhysConnEnum() then
        true
    else
        validSclExtensionPTypeEnum()
    endif
-----------------------------------------------------------

def: validSclPredefinedAttributeNameEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'T', 'Test', 'Check', 'SIUnit', 'Oper', 'SBO', 'SBOw', 'Cancel'
        }->includes( self )
    else
        false
    endif

def: validSclExtensionAttributeNameEnum() : Boolean =
    if( self.validSclRestrName1stL() ) then
        self.size() <= 60
    else
        false
    endif
 
def: validSclAttributeNameEnum() : Boolean =
    if validSclPredefinedAttributeNameEnum() then
        true
    else
        validSclExtensionAttributeNameEnum()
    endif
    
-----------------------------------------------------------

def: validSclPredefinedCommonConductingEquipmentEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'CBR', 'DIS', 'VTR', 'CTR', 'GEN', 'CAP', 'REA', 'CON', 'MOT', 'EFN',
            'PSH', 'BAT', 'BSH', 'CAB', 'GIL', 'LIN', 'RES', 'RRC', 'SAR', 'TCF',
            'TCR', 'IFL', 'FAN', 'SCR', 'SMC', 'PMP'
        }->includes( self )
    else
        false
    endif

def: validSclExtensionEquipmentEnum() : Boolean =
    if( self.validSclName() ) then
        self.size() >= 3 and self.matches( 'E[A-Z]*' )
    else
        false
    endif
 
def: validSclCommonConductingEquipmentEnum() : Boolean =
    if validSclPredefinedCommonConductingEquipmentEnum() then
        true
    else
        validSclExtensionEquipmentEnum()
    endif

-----------------------------------------------------------

def: validSclPowerTransformerEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'PTR'
        }->includes( self )
    else
        false
    endif

-----------------------------------------------------------

def: validSclTransformerWindingEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'PTW'
        }->includes( self )
    else
        false
    endif

-----------------------------------------------------------

def: validSclPredefinedGeneralEquipmentEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'AXN', 'BAT', 'MOT', 'FAN', 'FIL', 'PMP', 'TNK', 'VLV'
        }->includes( self )
    else
        false
    endif

def: validSclExtensionGeneralEquipmentEnum() : Boolean =
    if( self.validSclName() ) then
        self.size() >= 3 and self.matches( 'E[A-Z]*' )
    else
        false
    endif
 
def: validSclGeneralEquipmentEnum() : Boolean =
    if validSclPredefinedGeneralEquipmentEnum() then
        true
    else
        validSclExtensionGeneralEquipmentEnum()
    endif

-----------------------------------------------------------

-- This is a real enum
--def: validSclServiceSettingsNoDynEnum() : Boolean =
--  if( self.validSclName() ) then
--      Set{
--          'Conf', 'Fix'
--      }->includes( self )
--  else
--      false
--  endif

-----------------------------------------------------------

-- This is a real enum
--def: validSclServiceSettingsEnum() : Boolean =
--  if( self.validSclName() ) then
--      Set{
--          'Dyn', 'Conf', 'Fix'
--      }->includes( self )
--  else
--      false
--  endif

-----------------------------------------------------------

def: validSclRedProtEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'none', 'hsr', 'prp', 'rstp'
        }->includes( self )
    else
        false
    endif

-----------------------------------------------------------

-- This is a real enum
--def: validSclSMVDeliveryEnum() : Boolean =
--  if( self.validSclName() ) then
--      Set{
--          'unicast', 'multicast', 'both'
--      }->includes( self )
--  else
--      false
--  endif

-----------------------------------------------------------

-- This is a real enum
--def: validSclPhaseEnum() : Boolean =
--  if( self.validSclName() ) then
--      Set{
--          'A', 'B', 'C', 'N', 'all', 'none', 'AB', 'BC', 'CA'
--      }->includes( self )
--  else
--      false
--  endif

-----------------------------------------------------------

def: validSclAuthenticationEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'none', 'password', 'weak', 'strong', 'certificate'
        }->includes( self )
    else
        false
    endif

-----------------------------------------------------------

-- This is a real enum
--def: validSclAssociationKindEnum() : Boolean =
--    if( self.validSclName() ) then
--        Set{
--           'pre-established', 'predefined'
--        }->includes( self )
--    else
--        false
--    endif

-----------------------------------------------------------

def: validSclLPHDEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'LPHD'
        }->includes( self )
    else
        false
    endif
-----------------------------------------------------------

def: validSclLLN0Enum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'LLN0'
        }->includes( self )
    else
        false
    endif

-----------------------------------------------------------

def: validSclSystemLNGroupEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'LLN0', 'LPHD', 'LCCH', 'LGOS', 'LSVS', 'LTIM', 'LTMS', 'LTRK'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupAEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'ANCR', 'ARCO', 'ARIS', 'ATCC', 'AVCO'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupCEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'CALH', 'CCGR', 'CILO', 'CPOW', 'CSWI', 'CSYN'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupFEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'FCNT', 'FCSD', 'FFIL', 'FLIM', 'FPID', 'FRMP', 'FSPT', 'FXOT', 'FXUT'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupGEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'GAPC', 'GGIO', 'GLOG', 'GSAL'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupIEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'IARC', 'IHMI', 'ISAF', 'ITCI', 'ITMI', 'ITPC'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupKEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'KFAN', 'KFIL', 'KPMP', 'KTNK', 'KVLV'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupMEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'MDIF', 'MENV', 'MFLK', 'MHAI', 'MHAN', 'MHYD', 'MMDC', 'MMET', 'MMTN',
            'MMTR', 'MMXN', 'MMXU', 'MSQI', 'MSTA'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupPEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'PDIF', 'PDIR', 'PDIS', 'PDOP', 'PDUP', 'PFRC', 'PHAR', 'PHIZ', 'PIOC',
            'PMRI', 'PMSS', 'POPF', 'PPAM', 'PRTR', 'PSCH', 'PSDE', 'PTEF', 'PTHF',
            'PTOC', 'PTOF', 'PTOV', 'PTRC', 'PTTR', 'PTUC', 'PTUF', 'PTUV', 'PUPF',
            'PVOC', 'PVPH', 'PZSU'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupQEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'QFVR', 'QITR', 'QIUB', 'QVTR', 'QVUB', 'QVVR'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupREnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'RADR', 'RBDR', 'RBRF', 'RDIR', 'RDRE', 'RDRS', 'RFLO', 'RMXU', 'RPSB', 'RREC', 'RSYN'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupSEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'SARC', 'SCBR', 'SIMG', 'SIML', 'SLTC', 'SOPM', 'SPDC', 'SPTR', 'SSWI', 'STMP', 'SVBR'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupTEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'TANG', 'TAXD', 'TCTR', 'TDST', 'TFLW', 'TFRQ', 'TGSN', 'THUM', 'TLVL',
            'TMGF', 'TMVM', 'TPOS', 'TPRS', 'TRTN', 'TSND', 'TTMP', 'TTNS', 'TVBR',
            'TVTR', 'TWPH'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupXEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'XCBR', 'XSWI'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupYEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'YEFN', 'YLTC', 'YPSH', 'YPTR'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNGroupZEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'ZAXN', 'ZBAT', 'ZBSH', 'ZCAB', 'ZCAP', 'ZCON', 'ZGEN', 'ZGIL', 'ZLIN',
            'ZMOT', 'ZREA', 'ZRES', 'ZRRC', 'ZSAR', 'ZSCR', 'ZSMC', 'ZTCF', 'ZTCR'
        }->includes( self )
    else
        false
    endif

def: validSclDomainLNEnum() : Boolean =
       validSclDomainLNGroupAEnum()
    or validSclDomainLNGroupCEnum()
    or validSclDomainLNGroupFEnum()
    or validSclDomainLNGroupGEnum()
    or validSclDomainLNGroupIEnum()
    or validSclDomainLNGroupKEnum()
    or validSclDomainLNGroupMEnum()
    or validSclDomainLNGroupPEnum()
    or validSclDomainLNGroupQEnum()
    or validSclDomainLNGroupREnum()
    or validSclDomainLNGroupSEnum()
    or validSclDomainLNGroupTEnum()
    or validSclDomainLNGroupXEnum()
    or validSclDomainLNGroupYEnum()
    or validSclDomainLNGroupZEnum()

def: validSclPredefinedLNClassEnum() : Boolean =
       validSclSystemLNGroupEnum()
    or validSclDomainLNEnum()

def: validSclExtensionLNClassEnum() : Boolean =
    if( self.validSclName() ) then
        self.matches( '[A-Z]{4}' )
    else
        false
    endif
 
def: validSclLNClassEnum() : Boolean =
    if validSclPredefinedLNClassEnum() then
        true
    else
        validSclExtensionLNClassEnum()
    endif
    
-----------------------------------------------------------

def: validSclPredefinedCDCEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'SPS', 'DPS', 'INS', 'ENS', 'ACT', 'ACD', 'SEC', 'BCR', 'HST', 'VSS', 'MV',
            'CMV', 'SAV', 'WYE', 'DEL', 'SEQ', 'HMV', 'HWYE', 'HDEL', 'SPC', 'DPC', 'INC',
            'ENC', 'BSC', 'ISC', 'APC', 'BAC', 'SPG', 'ING', 'ENG', 'ORG', 'TSG', 'CUG',
            'VSG', 'ASG', 'CURVE', 'CSG', 'DPL', 'LPL', 'CSD', 'CST', 'BTS', 'UTS', 'LTS',
            'GTS', 'MTS', 'NTS', 'STS', 'CTS', 'OTS', 'VSD'
        }->includes( self )
    else
        false
    endif

def: validSclExtensionCDCEnum() : Boolean =
    if( self.validSclName() ) then
        self.matches( '[A-Za-z]{1,5}' )
    else
        false
    endif
 
def: validSclCDCEnum() : Boolean =
    if validSclPredefinedCDCEnum() then
        true
    else
        validSclExtensionCDCEnum()
    endif
        
-----------------------------------------------------------

-- This is a real enum
--def: validSclFCEnum() : Boolean =
--  if( self.validSclName() ) then
--      Set{
--          'ST', 'MX', 'CO', 'SP', 'SG', 'SE', 'SV', 'CF', 'DC', 'EX', 'SR', 'BL', 'OR'
--      }->includes( self )
--  else
--      false
--  endif

-----------------------------------------------------------

def: validSclPredefinedBasicTypeEnum() : Boolean =
    if( self.validSclName() ) then
        Set{
            'BOOLEAN', 'INT8', 'INT16', 'INT24', 'INT32', 'INT64', 'INT128', 'INT8U',
            'INT16U', 'INT24U', 'INT32U', 'FLOAT32', 'FLOAT64', 'Enum', 'Dbpos', 'Tcmd',
            'Quality', 'Timestamp', 'VisString32', 'VisString64', 'VisString65',
            'VisString129', 'VisString255', 'Octet64', 'Unicode255', 'Struct', 'EntryTime',
            'Check', 'ObjRef', 'Currency', 'PhyComAddr', 'TrgOps', 'OptFlds', 'SvOptFlds',
            'EntryID'
        }->includes( self )
    else
        false
    endif

def: validSclBasicTypeEnum() : Boolean =
    validSclPredefinedBasicTypeEnum()

-----------------------------------------------------------

-- This is a real enum
--def: validSclValKindEnum() : Boolean =
--  if( self.validSclName() ) then
--      Set{
--          'Spec', 'Conf', 'RO', 'Set'
--      }->includes( self )
--  else
--      false
--  endif

-----------------------------------------------------------

-- This is a real enum
--def: validSclGSEControlTypeEnum() : Boolean =
--  if( self.validSclName() ) then
--      Set{
--          'GSSE', 'GOOSE'
--      }->includes( self )
--  else
--      false
--  endif

-----------------------------------------------------------

-- This is a real enum
--def: validSclUnitMultiplierEnum() : Boolean =
--  if( self.size() = 0 ) then
--      true
--  else
--      Set{
--          'm', 'k', 'M', 'mu', 'y', 'z', 'a', 'f', 'p', 'n', 'c', 'd', 'da', 'h', 'G', 'T', 'P', 'E', 'Z', 'Y'
--      }->includes( self )
--  endif

-----------------------------------------------------------

def: validSclRightEnum() : Boolean =
        Set{
            'full', 'fix', 'dataflow'
        }->includes( self )

-----------------------------------------------------------

def: validSclSDOCount() : Boolean =
    self.matches( '[0-9]+' )
    or
    self.validSclRestrName1stL()

-----------------------------------------------------------

def: validSclDACount() : Boolean =
    self.matches( '[0-9]+' )
    or
    self.validSclAttributeNameEnum()

-----------------------------------------------------------

-- This is a real enum
--def: validSclSmpMod() : Boolean =
--      Set{
--          'SmpPerPeriod', 'SmpPerSec', 'SecPerSmp'
--      }->includes( self )

-----------------------------------------------------------

def: validSclPredefinedPhysConnTypeEnum() : Boolean =
    Set{
        'Connection', 'RedConn'
    }->includes( self )

def: validSclExtensionPhysConnTypeEnum() : Boolean =
    self.matches( '[A-Z][0-9A-Za-z]*' )
    -- TODO
    --self.matches( '[A-Z][0-9A-Za-z\-]*' )
 
def: validSclPhysConnTypeEnum() : Boolean =
    if validSclPredefinedPhysConnTypeEnum() then
        true
    else
        validSclExtensionPhysConnTypeEnum()
    endif
    
-----------------------------------------------------------

-- This is a real enum
--def: validSclServiceType() : Boolean =
--  if( self.validSclName() ) then
--      Set{
--          'Poll', 'Report', 'GOOSE', 'SMV'
--      }->includes( self )
--  else
--      false
--  endif

-----------------------------------------------------------

-- This is a real enum
--def: validSclPredefinedTypeOfSecurityEnum() : Boolean =
--  Set{
--      'None', 'Signature', 'SignatureAndEncryption'
--  }->includes( self )


