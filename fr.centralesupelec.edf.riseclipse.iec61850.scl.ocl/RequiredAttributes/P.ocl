/**
 *  Copyright (c) 2017 CentraleSupélec & EDF.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  This file is part of the RiseClipse tool
 *  
 *  Contributors:
 *      Computer Science Department, CentraleSupélec
 *      EDF R&D
 *  Contacts:
 *      dominique.marcadet@centralesupelec.fr
 *      aurelie.dehouck-neveu@edf.fr
 *  Web site:
 *      http://wdi.supelec.fr/software/RiseClipse/
 */
import scl: 'http://www.iec.ch/61850/2003/SCL'

import '../Helpers/Enums.ocl'

package scl

context P

    -- The type attribute shall be present and shall not be the empty string.
    inv P_type_required
        ( 'type attribute shall be present in P (line ' + self.lineNumber.toString() + ')' )
    :
        self.type <> null

    -- the type attribute shall be one of the predefined values or shall start with a capital letter,
    -- and contain only alphanumeric characters and dashes(-)
    inv P_type_valid
        ( 'type attribute shall be valid in P (line ' + self.lineNumber.toString() + ')). '
          + 'Current value is ' + self.type.toString()
        )
    :
        self.type <> null implies self.validSclPTypeEnum( type )
    
    -- The content of P shall be valid according to its type.
    inv P_value
        ( 'content shall be valid according to its type in P (line ' + self.lineNumber.toString() + ')). '
          + 'Current value is ' + self.value.toString() + ' for type ' + self.type.toString()
        )
    :
        if self.type = 'IP' or self.type = 'IP-SUBNET' or self.type = 'IP-GATEWAY' then
            -- XSD: <xs:pattern value="([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])"/>
            self.value.matches( '([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\u002E([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\u002E([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\u002E([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])' )
        else if self.type = 'IPv6' or self.type = 'IPv6-GATEWAY' then
            self.value.matches( '([0-9a-f]{1,4}:){7}[0-9a-f]{1,4}' )
        else if self.type = 'IPv6-SUBNET' then
            self.value.matches( '/[1-9]|/[1-9][0-9]|/1[0-1][0-9]|/12[0-7]' )
        else if self.type = 'DNSName' then
            -- XSD: <xs:pattern value="\S*"/>
            -- \s and \S not recognized ? 
            self.value.matches( '[- \t\n\u000B\f\r]*' )
        else if self.type = 'IPv6FlowLabel' then
            self.value.matches( '[0-9a-fA-F]{1,5}' )
        else if self.type = 'OSI-NSAP' then
            self.value.matches( '[0-9A-F]{1,40}' )
        else if self.type = 'OSI-TSEL' then
            self.value.matches( '[0-9A-F]{1,8}' )
        else
            -- TODO: others kind of adresses
            true
        endif endif endif endif endif endif endif


endpackage

